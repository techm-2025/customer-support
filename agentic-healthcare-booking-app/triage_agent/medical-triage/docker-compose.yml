version: '3.8'

services:
  # A2A Medical Triage Agent
  triage-agent:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    image: a2a-medical-triage:2.0.0
    container_name: a2a-triage-agent
    restart: unless-stopped
    
    # Environment variables
    environment:
      # Required: OpenAI Configuration
      - OPENAI_URL=${OPENAI_URL}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      
      # Optional: Model and provider settings
      - OPENAI_MODEL=${OPENAI_MODEL:-gpt-4o}
      - OPENAI_PROJECT_ID=${OPENAI_PROJECT_ID:-}
      - OPENAI_CONNECTION_ID=${OPENAI_CONNECTION_ID:-}
      - OPENAI_CONNECTION_NAME=${OPENAI_CONNECTION_NAME:-}
      - OPENAI_PROVIDER=${OPENAI_PROVIDER:-Azure-OpenAI}
      
      # Server configuration
      - PORT=${PORT:-8080}
      - HOST=${HOST:-0.0.0.0}
      - DEBUG=${DEBUG:-false}
      
      # Security
      - API_KEY=${API_KEY:-your-secure-api-key}
      
      # Logging
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - LOG_FORMAT=${LOG_FORMAT:-json}
    
    # Port mapping
    ports:
      - "${EXTERNAL_PORT:-8080}:8080"
    
    # Volume mounts for persistence
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./config:/app/config:ro
    
    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    
    # Networks
    networks:
      - a2a-network
    
    # Labels for service discovery
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.triage-agent.rule=Host(`triage.your-domain.com`)"
      - "traefik.http.routers.triage-agent.tls=true"
      - "traefik.http.routers.triage-agent.tls.certresolver=letsencrypt"
      - "traefik.http.services.triage-agent.loadbalancer.server.port=8080"
      - "a2a.agent.name=Medical Symptom Triage Agent"
      - "a2a.agent.version=2.0.0"
      - "a2a.protocol.version=0.2.9"

  # Optional: Reverse Proxy (Traefik)
  traefik:
    image: traefik:v3.0
    container_name: traefik
    restart: unless-stopped
    command:
      - --api.dashboard=true
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.letsencrypt.acme.tlschallenge=true
      - --certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL:-admin@your-domain.com}
      - --certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json
    ports:
      - "80:80"
      - "443:443"
      - "8081:8080"  # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./letsencrypt:/letsencrypt
    networks:
      - a2a-network
    profiles:
      - proxy

  # Optional: Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - a2a-network
    profiles:
      - monitoring

  # Optional: Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - a2a-network
    profiles:
      - monitoring

  # Optional: Redis for session storage
  redis:
    image: redis:7-alpine
    container_name: redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-secure-redis-password}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - a2a-network
    profiles:
      - cache

# Networks
networks:
  a2a-network:
    driver: bridge
    name: a2a-network

# Volumes
volumes:
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  redis_data:
    driver: local
